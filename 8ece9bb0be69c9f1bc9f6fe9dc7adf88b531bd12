{
  "comments": [
    {
      "key": {
        "uuid": "6e436fe2_29b9cd78",
        "filename": "jjb/macro.yaml",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 34
      },
      "writtenOn": "2017-04-03T23:52:53Z",
      "side": 1,
      "message": "What is this for?\n\nI\u0027m not sure how this variable is relevant here.\n\nNPM_CONFIG_PREFIX (or \u0027npm config get prefix\u0027) typically defaults to \"/usr/lib\". This relates to where global modules are installed by commands such as \"npm install -g grunt-cli\" or \"npm install -g npm\" for example.\n\nAside from the code that runs when provisioning an instance via Puppet for persistent slaves and/or Nodepool images, I don\u0027t think we do this kind of command anywhere.\n\nThe central cache directory defaults to $HOME/.npm (see \u0027npm config get cache\u0027). NPM supports that directory to be shared between concurrent processes, is robust against race conditions and job aborting and is internally fragmented by package name and version.\n\nThe $HOME/.npm cache directory is essentially used as an HTTP proxy (like Varnish) between npmjs.org and the workspace for the downloading of package tarballs etc.\n\nCastor already caches this one.\n\nWhen running \u0027npm install\u0027 in a build, assuming cache hit, NPM just copies the subset of relevant files from $HOME/.npm to $WORKSPACE/node_modules.\n\nThe notable exception to this logic is modules that require post-install build scripts or native compilation. Those artefacts are not cached at the HTTP layer, which is why some repositories like oojs-ui would like the workspace directory \"node_modules\" to be cached in-place in builds. That way, running \u0027npm prune \u0026\u0026 npm update\u0027 will only run build scripts or re-compile when there is a change detected in package.json compared to the version from castor.\n\nHowever to do this, we should not override the workspace directory for node_modules. That is not supported by npm and will break in many ways. I\u0027m also slightly confused as to what this was for.",
      "range": {
        "startLine": 45,
        "startChar": 15,
        "endLine": 45,
        "endChar": 32
      },
      "revId": "8ece9bb0be69c9f1bc9f6fe9dc7adf88b531bd12",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e436fe2_aa72ab0e",
        "filename": "jjb/macro.yaml",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 24
      },
      "writtenOn": "2017-04-04T14:02:12Z",
      "side": 1,
      "message": "The castor-save job runs on a different instance and would run something like that:\n\n  rsync jenkins@nodepoolinstance :workspace/vendor/node_modules\n\nThe reason I wanted a difference path is that castor save lacks the build context (eg BUILD_NAME or the actual job path such as /home/jenkins/workspace/npm-node-6-jessie ).\n\nMaybe we can use a symlink:\n\n mkdir -p /home/jenkins/workspace/vendor/node_modules\n ln -s /home/jenkins/workspace/vendor/node_modules $WORKSPACE/node_modules\n npm prune\n npm update\n\n\nThen castor-load / castor-save would always load/save the cache at the same directory.",
      "parentUuid": "6e436fe2_29b9cd78",
      "range": {
        "startLine": 45,
        "startChar": 15,
        "endLine": 45,
        "endChar": 32
      },
      "revId": "8ece9bb0be69c9f1bc9f6fe9dc7adf88b531bd12",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e436fe2_e8c99656",
        "filename": "jjb/macro.yaml",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 34
      },
      "writtenOn": "2017-04-05T04:04:31Z",
      "side": 1,
      "message": "I\u0027m not sure I follow. Just like for doc publish, the creation of the sub job happens in context of the current one. All env variables are available.\n\nAlso, it is possible to configure the job so that the main job waits for the sub job to finish. That way we don\u0027t have to worry about the workspace being deleted or changed by another job before castor-save is ready.\n\nAll we need then is a way for the sub job to know where the workspace is. I\u0027m not 100% sure, but I think the shared env variables provide enough information to reverse engineer the workspace.\n\nIf not, then we can use the other variables to at least create something \"mostly\" unique. For example, doc-publish uses \"$JOB_NAME-$BUILD_NUMBER\". We can use that here and create a symlink like \"/home/jenkins/castor/node_modules-$JOB_NAME-$BUILD_NUMBER\"\n\nI would avoid using a directory inside \"workspace/\" to avoid conflict with potential job names that use such workspace.",
      "parentUuid": "6e436fe2_aa72ab0e",
      "range": {
        "startLine": 45,
        "startChar": 15,
        "endLine": 45,
        "endChar": 32
      },
      "revId": "8ece9bb0be69c9f1bc9f6fe9dc7adf88b531bd12",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e436fe2_63a0488e",
        "filename": "jjb/macro.yaml",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 24
      },
      "writtenOn": "2017-04-05T12:43:13Z",
      "side": 1,
      "message": "It is a different context!\n\nAt the end of the build on a Nodepool instance, we trigger the job \u0027castor-save\u0027 that runs on another instance.  Good news: castor-save is triggered with the parameter:\n\n     TRIGGERED_JOB_NAME\u003d$JOB_NAME\n\nSo inside castor-save we have the original job name. So we can cache it that way.\n\n\nAnother issue is that for MediaWiki extensions and skins, the cache is shared:\n\n            if [[ \"$ZUUL_PROJECT\" \u003d~ ^mediawiki/(extensions|skins)/ ]]; then\n                NS_PROJECT\u003d\"castor-mw-ext-and-skins\"\n            fi\n\nnode_modules can be vaguely/vastly different between extensions and the cache would keep changing when changes of different mw repositories are merged :(  I guess that is what happens already for bundler (mediawiki repos all use the same rake-jessie job and workspace/vendor/bundle ).",
      "parentUuid": "6e436fe2_e8c99656",
      "range": {
        "startLine": 45,
        "startChar": 15,
        "endLine": 45,
        "endChar": 32
      },
      "revId": "8ece9bb0be69c9f1bc9f6fe9dc7adf88b531bd12",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e506ba4_fc4d2976",
        "filename": "jjb/macro.yaml",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 34
      },
      "writtenOn": "2017-04-06T02:24:07Z",
      "side": 1,
      "message": "Sharing the http cache in this way seems fine, since it only grows.\n\nBut the workspace node_modules must be associated with the zuul project uniquely, and not shared more than it already is. It would already be shared between multiple jobs for the same project that use npm.",
      "parentUuid": "6e436fe2_63a0488e",
      "range": {
        "startLine": 45,
        "startChar": 15,
        "endLine": 45,
        "endChar": 32
      },
      "revId": "8ece9bb0be69c9f1bc9f6fe9dc7adf88b531bd12",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}