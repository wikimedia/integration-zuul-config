# Contains any jobs related to the beta cluster.
#
# Beta is a cluster meant to reproduce the production environnement out of
# virtual instances in the Wikimedia labs.  We use Jenkins job to maintain
# some recurring tasks such as running the MediaWiki database schema updates.
#
# Jobs should be prefixed with 'beta-' and tied to the deployment-deploy*
# host defined in Jenkins.  They will run as the `jenkins-deploy` user on that
# instance.  To create a new job simply use the provided default which would
# take care of the basic configuration.
#
# Example:
#
#  - job:
#    name: beta-myawesomeness
#    defaults: beta
#    <your stuff there>

# Basic valid defaults, making sure we run on the deployment-deploy* host
# slave nodes which is in labs.
- defaults:
    name: beta
    description: |
      <p>Job is managed by <a href="https://www.mediawiki.org/wiki/CI/JJB">Jenkins Job Builder</a>.</p>
    project-type: freestyle

    wrappers:
      - timeout:
          timeout: 30
      - timestamps
      - ansicolor

# FIXME: unify with debian-glue
# this job is designed to handle our special little scap corner-cases
# that have accumulated after a few years of development on
# differential. Ideally could combine this job with the
# debian-glue job and somehow manage to trigger the beta publish job.
- job:
    name: scap-beta-deb
    defaults: beta
    properties:
      - copyartifact:
          projects: beta-publish-deb
    node: DebianGlue && DebianJessie
    triggers:
        - zuul
    builders:
      - shell: |
          set -x
          env
          rm -rf src source
          zuul-cloner \
            --color \
            --verbose \
            --workspace source \
            --map <(echo "clonemap: [{name: (.*), dest: .}]") \
            --cache-dir /srv/git \
            https://gerrit.wikimedia.org/r \
            "$ZUUL_PROJECT"

          cd source
          NAME="$(dpkg-parsechangelog --show-field source)"
          VERSION="$(dpkg-parsechangelog --show-field version)"
          SHA=$(git rev-parse --short HEAD)

          echo 'auto-commit' >> debian/source/options
          echo "${NAME} source: format-3.0-but-debian-changes-patch" >> debian/source.lintian-overrides

          git add .
          git commit --amend --no-edit

          export GIT_COMMIT=$(git rev-parse HEAD)
          export GIT_BRANCH=$GIT_COMMIT
          export SKIP_QUILT_CLEANUP=true
          export DBP_EXTRA_OPTS=--source-option=--auto-commit
          cd "$WORKSPACE"
          /usr/bin/generate-git-snapshot

          export distribution=jessie
          export REPOSITORY=/srv/packages
          export REPOS=jenkins-debian-glue
          export SKIP_REMOVE=true
          export BUILD_ONLY=yes

          /usr/bin/build-and-provide-package

          # We might consider adding --warnings
          set -o pipefail
          # Source package:
          /usr/bin/lintian-junit-report --filename lintian-binary.txt *.dsc | tee lintian-binary.xml

          # Binary package:
          /usr/bin/lintian-junit-report --filename lintian-source.txt *.changes | tee lintian-source.xml

          set +o pipefail
          exit 0
      - trigger-builds:
        - project: beta-publish-deb
          predefined-parameters: 'COPY_FROM=${JOB_NAME}'
          block: false
          same-node: false
    publishers:
      - xunit:
          thresholdsmode: 'number'
          thresholds:
              - failed:
                  failure: 0
          types:
              - junit:
                  pattern: 'lintian-*.xml'
      - archive:
          artifacts: '*.gz,*.bz2,*.xz,*.deb,*.dsc,*.buildinfo,*.changes,debc.txt,*lintian.txt,*lintian.xml'

- job:
    name: beta-publish-deb
    defaults: beta
    node: BetaClusterBastion
    builders:
      - copyartifact:
          project: '$COPY_FROM'
          which-build: upstream-build
          filter: '*.deb'
          target: /srv/deployment/debs
      - shell: |
          aptly repo -remove-files=false -force-replace=true add jessie-deployment-prep /srv/deployment/debs/
          aptly repo -remove-files=false -force-replace=true add trusty-deployment-prep /srv/deployment/debs/
          aptly repo -remove-files=true -force-replace=true add stretch-deployment-prep /srv/deployment/debs/
          aptly publish --skip-signing update jessie-deployment-prep
          aptly publish --skip-signing update trusty-deployment-prep
          aptly publish --skip-signing update stretch-deployment-prep

# Job to run MediaWiki update.php script on all the beta wikis.
#
# Set TMPDIR to point to the tmpfs if it exists.
- job-template:
    name: beta-update-databases-eqiad
    defaults: beta
    node: BetaClusterBastion

    builders:
      - shell: |
          # To clear out temporary directories
          function global_teardown() {{
              /srv/deployment/integration/slave-scripts/bin/global-teardown.sh
          }}
          . /srv/deployment/integration/slave-scripts/bin/global-setup.sh
          trap global_teardown EXIT

          /usr/local/bin/wmf-beta-update-databases.py

    publishers:
      - beta-irc

    wrappers:
      - ansicolor
      - timestamps
      - timeout:
          timeout: 45

    # We do not have a good way to detect databases modifications, so just spam
    # the beta cluster with update requests.
    triggers:
     - timed: '@hourly'

    properties:
     - build-discarder:
         days-to-keep: 15

# Job to deploy the Wikimedia MediaWiki configuration files
#
# The configuration files are hosted in operations/mediawiki-config.git which
# is deployed manually on the production cluster.  On beta, we cant really keep
# up with all the changes, so we deploy them on sight.
#
# We simply update the repository on the beta host and do a git reset hard.
#
- job-template:
    name: beta-mediawiki-config-update-eqiad
    defaults: beta
    node: BetaClusterBastion

    # Do not run concurrently with the downstream job
    block-downstream: true

    triggers:
     - zuul

    builders:
     - shell: /usr/local/bin/wmf-beta-mwconfig-update

    properties:
     - build-discarder:
         days-to-keep: 15

    publishers:
      - beta-irc
      - email-ext:
          recipients: qa-alerts@lists.wikimedia.org betacluster-alerts@lists.wikimedia.org
          attach-build-log: true
          first-failure: true
          aborted: true
          failure: false
          fixed: true
      - trigger:
          project: beta-scap-eqiad

# Job updating MediaWiki core+extensions code and refreshing the message
#
# This is the poor man auto updating script. We should probably split the
# script in different part and have the jobs trigger each other.
- job-template:
    name: beta-code-update-eqiad
    defaults: beta
    node: BetaClusterBastion

    # Do not run concurrently with the downstream job
    block-downstream: true

    properties:
     - build-discarder:
         days-to-keep: 7

    triggers:
     # Every ten minutes:
     - timed: 'H/10 * * * *'

    builders:
      - shell: |
          /usr/local/bin/wmf-beta-autoupdate.py --verbose

    publishers:
      - beta-irc
      - email-ext:
          recipients: qa-alerts@lists.wikimedia.org betacluster-alerts@lists.wikimedia.org
          attach-build-log: false
          first-failure: true
          aborted: true
          failure: false
          fixed: true
      - trigger:
          project: beta-scap-eqiad

- job-template:
    name: beta-scap-eqiad
    defaults: beta
    node: BetaClusterBastion

    # Do not run concurrently with upstream jobs
    block-upstream: true

    builders:
      - shell: |
          LOCKFILE="/var/lock/scap.operations_mediawiki-config.lock"
          if [ -O "$LOCKFILE" ]; then
            rm "$LOCKFILE"
          fi
          /usr/bin/scap sync "$JOB_NAME (build $BUILD_DISPLAY_NAME)"

    properties:
     - build-discarder:
         days-to-keep: 7

    wrappers:
      - ansicolor
      - timestamps
      - timeout:
          timeout: 60

    publishers:
      - beta-irc
      - email-ext:
          recipients: qa-alerts@lists.wikimedia.org betacluster-alerts@lists.wikimedia.org
          content-type: 'html'
          attach-build-log: false
          aborted: true
          failure: true
          fixed: true

# Also used in mediawiki-core-code-coverage
- publisher:
    name: beta-irc
    publishers:
      - ircbot:
          strategy: failure-and-fixed
          notify-start: false
          notify-committers: false
          notify-culprits: false
          notify-upstream: false
          notify-fixers: false
          message-type: summary
          matrix-notifier: only-parent
          channels:
              - name: '#wikimedia-releng'
                notify-only: true

- project:
    name: beta
    jobs:
     - beta-code-update-eqiad
     - beta-mediawiki-config-update-eqiad
     - beta-scap-eqiad
     - beta-update-databases-eqiad
