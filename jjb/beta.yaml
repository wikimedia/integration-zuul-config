# Contains any jobs related to the beta cluster.
#
# Beta is a cluster meant to reproduce the production environnement out of
# virtual instances in the Wikimedia labs.  We use Jenkins job to maintain
# some recurring tasks such as running the MediaWiki database schema updates.
#
# Jobs should be prefixed with 'beta-' and tied to the 'deployment-bastion'
# host defined in Jenkins.  They will run as the `jenkins-deploy` user on that
# instance.  To create a new job simply use the provided default which would
# take care of the basic configuration.
#
# Example:
#
#  - job:
#    name: beta-myawesomeness
#    defaults: beta
#    <your stuff there>

# Basic valid defaults, making sure we run on the deployment-bastion host
# slave nodes which is in labs.
- defaults:
    name: beta
    description: |
      <p>Job is managed by <a href="https://www.mediawiki.org/wiki/CI/JJB">Jenkins Job Builder</a>.</p>
    project-type: freestyle

    wrappers:
      - timeout:
          timeout: 30
      - timestamps
      - ansicolor

# Job to run MediaWiki update.php script on all the beta wikis.
#
# Set TMPDIR to point to the tmpfs if it exists.
- job-template:
    name: beta-update-databases-eqiad
    defaults: beta
    node: BetaClusterBastion

    builders:
      - global-setup
      - shell: |
          . /srv/deployment/integration/slave-scripts/bin/global-set-env.sh
          /usr/local/bin/wmf-beta-update-databases.py

    publishers:
      - global-teardown
      - beta-irc

    wrappers:
      - ansicolor
      - timestamps
      - timeout:
          timeout: 45

    # We do not have a good way to detect databases modifications, so just spam
    # the beta cluster with update requests.
    triggers:
     - timed: '@hourly'

    logrotate:
        daysToKeep: 15

# Job to deploy the Wikimedia MediaWiki configuration files
#
# The configuration files are hosted in operations/mediawiki-config.git which
# is deployed manually on the production cluster.  On beta, we cant really keep
# up with all the changes, so we deploy them on sight.
#
# We simply update the repository on the beta host and do a git reset hard.
#
- job-template:
    name: beta-mediawiki-config-update-eqiad
    defaults: beta
    node: BetaClusterBastion

    # Do not run concurrently with the downstream job
    block-downstream: true

    triggers:
     - zuul

    builders:
     - shell: /usr/local/bin/wmf-beta-mwconfig-update

    logrotate:
        daysToKeep: 15

    publishers:
      - beta-irc
      - email-ext:
          recipients: qa-alerts@lists.wikimedia.org betacluster-alerts@lists.wikimedia.org
          attach-build-log: true
          first-failure: true
          aborted: true
          failure: false
          fixed: true
      - trigger:
          project: beta-scap-eqiad

# Job updating MediaWiki core+extensions code and refreshing the message
#
# This is the poor man auto updating script. We should probably split the
# script in different part and have the jobs trigger each other.
- job-template:
    name: beta-code-update-eqiad
    defaults: beta
    node: BetaClusterBastion

    # Do not run concurrently with the downstream job
    block-downstream: true

    logrotate:
        daysToKeep: 7

    triggers:
     # Every ten minutes:
     - timed: 'H/10 * * * *'

    builders:
      - global-setup
      - shell: |
          . /srv/deployment/integration/slave-scripts/bin/global-set-env.sh
          /usr/local/bin/wmf-beta-autoupdate.py --verbose

    publishers:
      - global-teardown
      - beta-irc
      - email-ext:
          recipients: qa-alerts@lists.wikimedia.org betacluster-alerts@lists.wikimedia.org
          attach-build-log: false
          first-failure: true
          aborted: true
          failure: false
          fixed: true
      - trigger:
          project: beta-scap-eqiad

- job-template:
    name: beta-scap-eqiad
    defaults: beta
    node: BetaClusterBastion

    # Do not run concurrently with upstream jobs
    block-upstream: true

    builders:
      - shell: |
          /srv/deployment/scap/scap/bin/scap "$JOB_NAME (build $BUILD_DISPLAY_NAME)"

    logrotate:
        daysToKeep: 7

    wrappers:
      - ansicolor
      - timestamps
      - timeout:
          timeout: 45

    publishers:
      - beta-irc
      - email-ext:
          recipients: qa-alerts@lists.wikimedia.org betacluster-alerts@lists.wikimedia.org
          content-type: 'html'
          attach-build-log: false
          aborted: true
          failure: true
          fixed: true

- job-template:
    name: beta-parsoid-update-eqiad
    defaults: beta
    node: deployment-parsoid-eqiad
    triggers:
     - zuul
    logrotate:
        daysToKeep: 15
    builders:
     # Builder macro that uses multigit.sh to fetch parsoid and parsoid/deploy
     # applying triggered change patch to the proper repository
     - shell: |
         /srv/deployment/integration/slave-scripts/bin/multigit.sh \
         mediawiki/services/parsoid mediawiki/services/parsoid/deploy
     - shell: |
         cd parsoid
         # Extra paranoia, multigit already does a git clean -xqdff
         rm -fR node_modules
         npm install

     - shell: |
         PARSOID_TARGET=/srv/deployment/parsoid
         mkdir -p "$PARSOID_TARGET"
         # sync workspace and deployment target
         RSYNC_OPTS="--update --times --recursive --links --delete-after --delay-updates"
         rsync $RSYNC_OPTS $WORKSPACE/parsoid "$PARSOID_TARGET"
         rsync $RSYNC_OPTS $WORKSPACE/deploy "$PARSOID_TARGET"

     - shell: |
         sudo /etc/init.d/parsoid restart
    publishers:
      - beta-irc

- job-template:
    name: beta-cxserver-update-eqiad
    defaults: beta
    node: deployment-sca01
    triggers:
     - zuul
    logrotate:
        daysToKeep: 15
    builders:
     - shell: |
        /srv/deployment/integration/slave-scripts/bin/multigit.sh \
          mediawiki/services/cxserver mediawiki/services/cxserver/deploy
     - shell: |
         CXSERVER_TARGET=/srv/deployment/cxserver
         mkdir -p "$CXSERVER_TARGET"
         # sync workspace and deployment target
         RSYNC_OPTS="--update --times --recursive --links --delete-after --delay-updates"
         rsync $RSYNC_OPTS $WORKSPACE/cxserver "$CXSERVER_TARGET"
         rsync $RSYNC_OPTS $WORKSPACE/deploy "$CXSERVER_TARGET"

     - shell: |
         sudo service cxserver restart
    publishers:
     - beta-irc

# Also used in mediawiki-core-code-coverage
- publisher:
    name: beta-irc
    publishers:
      - ircbot:
          strategy: failure-and-fixed
          notify-start: false
          notify-committers: false
          notify-culprits: false
          notify-upstream: false
          notify-fixers: false
          message-type: summary
          matrix-notifier: only-parent
          channels:
              - name: '#wikimedia-releng'
                notify-only: true

- project:
    name: beta
    jobs:
     - beta-code-update-eqiad
     - beta-mediawiki-config-update-eqiad
     - beta-cxserver-update-eqiad
     - beta-parsoid-update-eqiad
     - beta-scap-eqiad
     - beta-update-databases-eqiad
