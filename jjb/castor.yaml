# CASTOR - CAche STORage
#
# Let us save package manager caches on a central instance and warm a cache
# when a job runs on a Nodepool disposable instance.
#

# Entry point to save to the central cache
- publisher:
    name: castor-save
    publishers:
     - postbuildscript:
         script-only-if-succeeded: True
         builders:
          - trigger-builds:
              - project: castor-save
                # Pass ZUUL and others
                current-parameters: True
                # Pass:
                # - job name to namespace the central cache
                # - ssh connection which holds the slave IP to which castor
                #   will rsync from
                predefined-parameters: |
                    TRIGGERED_JOB_NAME=$JOB_NAME
                    TRIGGERED_SSH_CONNECTION=$SSH_CONNECTION
                # Must be blocking or the instance might be disposed
                block: true
                # Ignore any error
                block-thresholds:
                    build-step-failure-threshold: 'never'
                    unstable-threshold: 'never'
                    failure-threshold: 'never'

# Entry point to load cache from central cache
#
# Forge the namespace and rsync from central place.
#
# Transfer is done with rsync:// protocol fetching from the 'caches' rsync
# module which is read-only.
#
- builder:
    name: castor-load
    builders:
        - shell: |
            # WARN: copy pasted in castor-save
            # Replace slashes with dashes:
            ZUUL_PROJECT=${ZUUL_PROJECT////-}
            ZUUL_BRANCH=${ZUUL_BRANCH////-}
            # Ex: mediawiki-core/REL1_26/tox-jessie
            CASTOR_NAMESPACE="${ZUUL_PROJECT}/${ZUUL_BRANCH}/${JOB_NAME}"

            echo "Syncing..."
            rsync \
              --archive \
              --verbose \
              --compress \
              --contimeout 3 \
              rsync://castor.integration.eqiad.wmflabs:/caches/${CASTOR_NAMESPACE}/ $HOME \
              || :
            echo -e "\nDone"

# Job triggered on the central repository instance
#
# Rsync from an instance using the Nodepool 'jenkins' credential.  The ssh key
# is made available via an ssh-agent and injected by Jenkins credentials store.
#
- job:
    name: castor-save
    node: castor
    concurrent: true
    parameters:
        - string:
            name: TRIGGERED_SSH_CONNECTION
            description: 'SSH_CONNECTION of upstream job (contains IP of remote instance)'
        - string:
            name: TRIGGERED_JOB_NAME
            description: 'JOB_NAME of upstream job'
        - string:
            name: ZUUL_PIPELINE
            description: 'Name of Zuul pipeline. Must be gate-and-submit to actually save cache.'
    wrappers:
        - ansicolor
        - timeout:
            timeout: 1  # minutes
            abort: false
            fail: false
        - timestamps
        - ssh-agent-credentials:
            users:
             - 'nodepool-dib-jenkins'

    builders:
        # This is horrible. Will need a better system that just prevent the job
        # from being triggered by the upstream job.
        - shell: |
            # Note: described in the parameters: section above
            if [ "$ZUUL_PIPELINE" != 'gate-and-submit' ]; then
                echo "Only saving cache for gate-and-submit pipeline"
                exit 0
            fi
        - shell: |
            set -eu +x

            ssh_config=($TRIGGERED_SSH_CONNECTION)
            REMOTE_INSTANCE="${ssh_config[2]}"

            # WARN: copy pasted in castor-load
            # Replace slashes with dashes:
            ZUUL_PROJECT=${ZUUL_PROJECT////-}
            ZUUL_BRANCH=${ZUUL_BRANCH////-}
            # Ex: mediawiki-core/REL1_26/tox-jessie
            CASTOR_NAMESPACE="${ZUUL_PROJECT}/${ZUUL_BRANCH}/${TRIGGERED_JOB_NAME}"

            # Destination in the central cache
            DEST="/mnt/jenkins-workspace/caches/${CASTOR_NAMESPACE}"

            echo "Ensure cache directories exist on remote $REMOTE_INSTANCE"
            ssh -q -a -T \
              -o ConnectTimeout=6 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
              jenkins@"${REMOTE_INSTANCE}" \
              'mkdir -v -p .cache/pip/wheels .npm workspace/vendor/bundle'

            echo "Creating directory holding cache:"
            mkdir -v -p "${DEST}"

            echo -e "Syncing cache\nFrom.. ${REMOTE_INSTANCE}\nTo.... ${DEST}"
            rsync \
              --archive \
              --verbose \
              --compress \
              --rsh="ssh -a -T  -o ConnectTimeout=6 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no" \
              --delete-delay \
              --relative \
              jenkins@"${REMOTE_INSTANCE}":.cache/pip/wheels :.npm :workspace/vendor/bundle "${DEST}/"

            echo -e "\nDone"
