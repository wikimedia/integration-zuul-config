# Git comes with a whitespace checking system that will fail whenever the diff
# contains trailing spaces.  We can use that to easily lint whitespaces in
# submitted changes.

- builder:
    name: erblint-HEAD
    builders:
     - shell: |
        /srv/deployment/integration/slave-scripts/bin/git-changed-in-head erb \
        | xargs -n1 -I {} -t sh -c 'erb -P -x -T - {} | ruby -c'

- builder:
    name: puppet-lint-strict
    builders:
     - shell: |
         rm -f puppet-lint.log
         puppet-lint --version
         set -o pipefail
         puppet-lint \
            --log-format '%{path}:%{line} %{KIND} %{message} (%{check})' \
            --fail-on-warnings \
            . | tee puppet-lint.log
         set +o pipefail

- builder:
    name: puppet-lint-lenient
    builders:
     - shell: |
         rm -f puppet-lint.log
         puppet-lint --version
         set -o pipefail
         puppet-lint \
            --error-level error \
            --log-format '%{path}:%{line} %{KIND} %{message} (%{check})' \
            . | tee puppet-lint.log
         set +o pipefail

- publisher:
    name: puppet-lint
    publishers:
     - archive:
         artifacts: puppet-lint.log

- builder:
    name: pplint-HEAD
    builders:
     - shell: |
        /srv/deployment/integration/slave-scripts/bin/git-changed-in-head pp \
        | xargs -n1 -t puppet parser validate

# Lint whitespace in directory {dir}. Usefull when the Git repository has
# been fetched out in some subdirtory of the Workspace. Example:
#
#  builder:
#    - lint-whitespaces-in:
#       dir: "$WORKSPACE/extensions/Foobar"
#
- builder:
    name: lint-whitespaces-in
    builders:
        - shell: "git --work-tree=\"{dir}\" diff --color --check HEAD^..HEAD"

# Lint whitespaces under $WORKSPACE. This is most probably the one you
# want to use. Example:
#
# builder:
#  - lint-whitespaces
#
- builder:
    name: lint-whitespaces
    builders:
     - lint-whitespaces-in:
        dir: '$WORKSPACE'

# `get-mw-core` injects mediawiki/core@{requested branch} in $WORKSPACE
# This should be used when testing extensions
#
# The aim is to get the very latest MediaWiki core version into the extension
# workspace without having to fully clone the repository. We cant use git
# archive with Gerrit so we get the code from the local replicated clone.
- builder:
    name: get-mw-core
    builders:
        - shell: "/srv/deployment/integration/slave-scripts/bin/mw-core-get.sh {branch}"

- builder:
    name: jshint
    builders:
     - shell: |
        /srv/deployment/integration/slave-scripts/bin/jshint --version
        /srv/deployment/integration/slave-scripts/bin/jshint .

- builder:
    name: jsonlint
    builders:
     - shell: /srv/deployment/integration/slave-scripts/bin/json-lint.php .

# ALWAYS pair with 'global-teardown'
- builder:
    name: npm-install
    builders:
    - shell: |
        . /srv/deployment/integration/slave-scripts/bin/npm-setup.sh
        node --version
        npm --version
        rm -rf node_modules
        npm install

# ALWAYS pair with 'global-teardown'
- builder:
    name: npm
    builders:
    - shell: |
        . /srv/deployment/integration/slave-scripts/bin/npm-setup.sh
        node --version
        npm --version
        rm -rf node_modules
        npm install
        npm test

# Variant that can use a deploy repo for the dependencies.
# See macro setup-npm-oid below.
#
# ALWAYS pair with 'global-teardown'
- builder:
    name: npm-oid
    builders:
     - setup-npm-oid:
         repository: '{repository}'
     - shell: |
         . /srv/deployment/integration/slave-scripts/bin/npm-setup.sh
         # node_modules is not purged, taken care of by setup-npm-oid

         node --version
         npm --version
         . npm-oid.env
         cd "$NPM_SET_PATH"
         npm test

- publisher:
    name: global-teardown
    publishers:
     - postbuildscript:
         builders:
          - shell: "/srv/deployment/integration/slave-scripts/bin/global-teardown.sh"
         # Postbuild options are confusing, setting both to false ensures the script always runs.
         onsuccess: False
         onfailure: False

# cxserver and parsoid services come with two repositories:
# eg
# mediawiki/services/cxserver: the actual source code
# mediawiki/services/cxserver/deploy : node modules + code under /src/
#
# We share the job-templates describing tests commands to run, the
# setup-npm-oid macro would contains environment variable pointing to the
# source `tests` directory and set the NODE_PATH
#
# Once used, subsequent shell commands should load the env variables by using:
#   . npm-oid.env
#
# Note we run `npm install` so we better have npm installed (ie on labs)
- builder:
    name: setup-npm-oid
    builders:
     - shell: |
        rm -f npm-oid.env

        case "{repository}" in
        "source")
            NPM_SET_PATH="."
            echo "Running npm install"
            rm -rf node_modules
            npm install
            ;;
        "deploy")
            NPM_SET_PATH="./src"
            # All modules should already be in the deploy repo, no npm install
            ;;
        *)
            echo "JJB {{repository}} parameter '{repository}' is not recognized."
            exit 1
            ;;
        esac
        echo "NPM_SET_PATH=$NPM_SET_PATH" >> npm-oid.env
        echo 'NODE_PATH=$NODE_PATH:'"$WORKSPACE/node_modules" >> npm-oid.env
        echo 'PATH=$PATH:'"$WORKSPACE/node_modules/.bin" >> npm-oid.env

- builder:
    name: assert-env-doc_subpath
    builders:
     - shell: |
         if [ -z $DOC_SUBPATH ]; then
             echo "\$DOC_SUBPATH is missing. Can not publish."
             exit 1
         fi

# Assert 'php' is phpflavor
#
# Parameter:
# * phpflavor: 'hhvm' or 'zend'
#
- builder:
    name: assert-phpflavor
    builders:
        - shell: |
            #!/bin/bash -eu
            PHP_VERSION=`php --version`

            case "{phpflavor}" in
                ( 'hhvm' )
                    MATCHER='^HipHop'
                ;;
                ( 'zend' )
                    MATCHER='^Zend Engine'
                ;;
                ( * )
                    echo "Invalid phpflavor '{phpflavor}' for JJB macro 'assert-phpflavor'"
                    echo "Must be either 'hhvm' or 'zend'"
                    exit 1
                ;;
            esac

            if ( echo "$PHP_VERSION" | egrep "$MATCHER" > /dev/null ); then
                echo -e "php is {phpflavor}:\n\n$PHP_VERSION\n"
            else
                echo -e "Assertion error: php is not {phpflavor}:\n\n$PHP_VERSION\n"
                exit 1
            fi

- builder:
    name: 'hhvm-clear-hhbc'
    builders:
        - shell: |
            rm -f *.hhbc

# Assert node version matches a basic regular expressions
#
# Parameter:
# * version: passed to `grep`
#
- builder:
    name: assert-node-version
    builders:
     - shell: |
         #!/bin/bash -e -u
         NODE_VERSION=`node --version`

         if ( echo "$NODE_VERSION" | grep "{version}" > /dev/null )
         then
             echo "Node version $NODE_VERSION matches '{version}'"
         else
             echo "Assertion error: node version $NODE_VERSION does not match '{version}'"
             exit 1
         fi

- builder:
    name: assert-node-version-0.8
    builders:
     - assert-node-version:
         version: ^v0[.]8[.]

- builder:
    name: assert-node-version-0.10
    builders:
     - assert-node-version:
         version: ^v0[.]10[.]

- builder:
    name: jsduck
    builders:
     - shell: |
        echo "Running JSDuck..."
        jsduck

# ALWAYS pair with 'qunit-cleanup'
- builder:
    name: prepare-qunit-localhost
    builders:
     - shell: |
        # Load context (e.g. MW_INSTALL_PATH, MW_SERVER, MW_SCRIPT_PATH)
        . /srv/deployment/integration/slave-scripts/bin/mw-set-env-qunit.sh

        # Configure MediaWiki
        echo -e \
         "<?php\n\$wgServer = '${MW_SERVER}';\n"\
         "\$wgScriptPath = '${MW_SCRIPT_PATH}';\n"\
         "\$wgScript = \$wgStylePath = \$wgLogo = false;\n"\
         "\$wgEnableJavaScriptTest = true;\n" >> "$MW_INSTALL_PATH/LocalSettings.php"

        # The location is free or we make it free
        test ! -e /srv/localhost/qunit/$BUILD_TAG || rm /srv/localhost/qunit/$BUILD_TAG;

        # Publish our install in the QUnit server document root
        ln -s "$MW_INSTALL_PATH" /srv/localhost/qunit/$BUILD_TAG

        # Fetch headers and content preview for debugging (HTTP 500 Error, Database error, ResourceLoader etc.)
        curl --include "$MW_SERVER/$MW_SCRIPT_PATH/index.php?title=Special:BlankPage" | head -n42
        curl --include "$MW_SERVER/$MW_SCRIPT_PATH/load.php?debug=true&modules=startup&only=scripts" | head -n42

# qunit
#
# ALWAYS pair with 'qunit-cleanup'
# ALWAYS pair with 'global-teardown' (for npm-setup)
- builder:
    name: qunit-querystring
    builders:
     - prepare-qunit-localhost
     - shell: |
        # Run Special:JavaScriptTest/qunit via grunt-contrib-qunit in PhantomJS
        /srv/deployment/integration/slave-scripts/bin/wmfgrunt qunit --qunit-url="http://localhost:9412/$BUILD_TAG/index.php?title=Special:JavaScriptTest/qunit{querystring}"
- builder:
    name: qunit
    builders:
     - qunit-querystring:
        querystring: ''
- builder:
    name: qunit-mobile
    builders:
     - qunit-querystring:
        querystring: '&useformat=mobile'
- builder:
    name: qunit-karma
    builders:
    builders:
     - prepare-qunit-localhost
     - shell: |
        . /srv/deployment/integration/slave-scripts/bin/mw-set-env-qunit.sh
        cd $MW_INSTALL_PATH
        . /srv/deployment/integration/slave-scripts/bin/npm-setup.sh
        rm -rf node_modules
        npm install
        grunt karma:main

- publisher:
    name: qunit-cleanup
    publishers:
     - postbuildscript:
         builders:
           - shell: |
               rm -f "/srv/localhost/qunit/$BUILD_TAG"
         # Postbuild options are confusing, setting both to false ensures the script always runs.
         onsuccess: False
         onfailure: False

# - src: (without trailing slash)
# - project: (usually repo name or a custom title like "VisualEditor") - will be escaped
# - version: (usually branch name) - will be escaped
- builder:
    name: documentation-sync
    builders:
     - documentation-sync-subdir:
        src: '{src}'
        project: '{project}'
        version: '{version}'
        subdir: ''

# Is there a way to make the jjb/yaml "{subdir}" param optional?
# Then we could make it default to empy string instead of creating
# a separate builder
# - subdir: (must have trailing slash) - will not be escaped
- builder:
    name: documentation-sync-subdir
    builders:
     - shell: |
        # Set destination and version directory therein
        DEST_DIR="/srv/org/wikimedia/doc"
        DEST_PROJECTDIR=`echo "{project}" | tr '/' '-'`
        DEST_VERSIONDIR=`echo "{version}" | tr '/' '-'`
        DEST_EXTRAPATH="{subdir}"
        # Ensure the destination exists
        mkdir -p "$DEST_DIR/$DEST_PROJECTDIR/$DEST_VERSIONDIR/$DEST_EXTRAPATH"
        # Publish it (trailing slash is important!)
        rsync --recursive --delete-after --force {src}/ "$DEST_DIR/$DEST_PROJECTDIR/$DEST_VERSIONDIR/$DEST_EXTRAPATH"

# Has to be named something other than 'checkstyle' or python will
# go into infinite recursion when generating the jobs.
# JSHint considers all errors to be "high" priority except those
# suppressed via options in jshintrc (those become "normal").
# So we need to make sure we don't count warnings that are intentionally
# ignored by style or convention of the repository.
- publisher:
    name: checkstyle-xml
    publishers:
     - checkstyle:
        pattern: '**/checkstyle-*.xml'
        canRunOnFailed: true
        healthy: 0
        unHealthy: 100
        healthThreshold: 'high'
        thresholds:
            unstable:
                totalHigh: 10
            failed:
                totalHigh: 1

- builder:
    name: mw-apply-settings
    builders:
     - shell: "/srv/deployment/integration/slave-scripts/bin/mw-apply-settings.sh"

- builder:
    name: mw-get-extensions
    builders:
        - shell: "/srv/deployment/integration/slave-scripts/tools/fetch-mw-ext {dependencies}"

- builder:
    name: mw-run-update-script
    builders:
        - shell: "/srv/deployment/integration/slave-scripts/bin/mw-run-update-script.sh"

# ALWAYS pair with 'mw-teardown' publisher to ensure we don't leave temporary files behind
- builder:
    name: mw-setup
    builders:
        - shell: "/srv/deployment/integration/slave-scripts/bin/mw-setup.sh"

# ALWAYS pair with 'mw-teardown' publisher to ensure we don't leave temporary files behind
- builder:
    name: mw-install-sqlite
    builders:
     - shell: "/srv/deployment/integration/slave-scripts/bin/mw-install-sqlite.sh"

# ALWAYS pair with 'mw-teardown-mysql' publisher to ensure we don't leave temporary files behind
- builder:
    name: mw-install-mysql
    builders:
     - shell: "/srv/deployment/integration/slave-scripts/bin/mw-install-mysql.sh"

- publisher:
    name: mw-teardown
    publishers:
     - postbuildscript:
         builders:
          - shell: "/srv/deployment/integration/slave-scripts/bin/mw-teardown.sh"
         # Postbuild options are confusing, setting both to false ensures the script always runs.
         onsuccess: False
         onfailure: False

- publisher:
    name: mw-teardown-mysql
    publishers:
     - postbuildscript:
         builders:
          - shell: "/srv/deployment/integration/slave-scripts/bin/mw-teardown-mysql.sh"
         # Postbuild options are confusing, setting both to false ensures the script always runs.
         onsuccess: False
         onfailure: False

# This macro is OBSOLETE
#
# Instead one should use Zuul cloner:
#
# - zuul-cloner-extdeps:
#    ext-name: '{ext-name}'
#    dependencies: '{dependencies}'
# - mw-install-sqlite
# - shell: "cp deps.txt src/extensions_load.txt"
# - mw-apply-settings
#
- builder:
    name: mw-setup-extension
    builders:
     - get-mw-core:
          branch: '{mwbranch}'
     - mw-install-sqlite
     - mw-get-extensions:
          dependencies: '{dependencies}'
     - mw-apply-settings

- builder:
    name: mw-phpunit
    builders:
      - shell: 'php tests/phpunit/phpunit.php --log-junit junit-phpunit.xml'

- builder:
    name: mw-run-phpunit-allexts
    builders:
      - shell: '/srv/deployment/integration/slave-scripts/bin/mw-run-phpunit-allexts.sh'

# Generic phpunit builder, output junit log
# Should be used with publisher 'phpunit-junit'
- builder:
    name: phpunit-junit
    builders:
     - shell: 'mkdir -p log && /srv/deployment/integration/phpunit/vendor/bin/phpunit --log-junit log/junit-phpunit.xml'

# Publish PHPUnit junit results as generated by phpunit-junit builder
- publisher:
    name: phpunit-junit
    publishers:
     - xunit:
        types:
         - phpunit:
            pattern: 'log/junit-phpunit.xml'

# Used
- publisher:
    name: phpunit-junit-2
    publishers:
     - xunit:
        types:
         - phpunit:
            pattern: 'log/junit-mw-phpunit.xml'

# Python pep8 builder - copied from OpenStack project
- builder:
    name: pep8
    builders:
     - shell: |
         set +x
         echo "Using pep8 version: `pep8 --version`"
         set -x
         set -o pipefail ; pep8 . | tee pep8.txt ; set +o pipefail

# Python pep8 publisher - copied from OpenStack project
- publisher:
    name: pep8
    publishers:
     - violations:
        pep8:
            min: 0
            max: 1
            unstable: 1
            pattern: '**/pep8.txt'

- builder:
      name: perllint
      builders:
       - shell: |
          # File used to track down whether a perl file is failing syntax check
          rm -f PERLLINT_FAILED

          find . \
            \( -name '*.pm' -or -name '*.pl' \) \
            \( -exec perl -Mstrict -Mdiagnostics -cw {} \; \
            -or -exec touch PERLLINT_FAILED  \; \)

          # Set exit code to fail the build
          if [ -e PERLLINT_FAILED ]; then
              exit 1
          fi;

- builder:
    name: pyflakes
    builders:
     - shell: "pyflakes ."

- builder:
    name: phplint
    builders:
     - shell: |
        /srv/deployment/integration/slave-scripts/bin/git-changed-in-head php php5 inc phtml module install \
        | xargs -n1 -t php -l

# run phpcs on any .php and .inc files in the workspace
# Except for Messages* and *.i18n.php (such as in installer)
- builder:
    name: phpcs
    builders:
     - shell: /srv/deployment/integration/slave-scripts/bin/run-phpcs-mw.sh

# run phpcs on files changed in HEAD.
# Except for Messages* and *.i18n.php (such as in installer)
- builder:
    name: phpcs-HEAD
    builders:
     - shell: /srv/deployment/integration/slave-scripts/bin/run-phpcs-mw.sh HEAD

- publisher:
    name: phpcs
    publishers:
     - violations:
        checkstyle:
            min: 0
            max: 1
            unstable: 1
            pattern: '**/checkstyle-phpcs.xml'


- builder:
    name: php-extension
    builders:
     - shell: |
        phpize
        ./configure
        make
        make test

- builder:
    name: puppet-validate
    builders:
     - shell: |
        find . -type f -name '*.pp' -print0 | xargs -0 puppet parser validate

# Run ruby syntax check against any file named '.rb' under the workspace.
# The ruby interpreter is passed using 'interpreter'
- builder:
    name: ruby-lint
    builders:
     - shell: |
        find "$WORKSPACE" -type f -name '*.rb' -print0 | xargs -t -n1 -0 {interpreter} -c

- builder:
    name: tox
    builders:
     - shell: |
        rm -fR log
        mkdir -p log
        set -o pipefail
        PY_COLORS=1 tox -v -e "{venv}" | tee "log/{venv}.log"
        set +o pipefail

- builder:
    name: yaml-lint
    builders:
     - shell: '/srv/deployment/integration/slave-scripts/tools/yamllint.py "$WORKSPACE"'

- publisher:
    name: archive-log-dir
    publishers:
     - archive:
        artifacts: 'log/*'


# Validate a composer.json
- builder:
    name: composer-validate
    builders:
     - shell: |
        /srv/deployment/integration/composer/vendor/bin/composer --ansi validate --no-check-publish

# Validate a composer.json so it can be published on packagist.org
- builder:
    name: composer-validate-package
    builders:
     - shell: |
        /srv/deployment/integration/composer/vendor/bin/composer --ansi validate

# Notes:
#
# `composer update` is being passed `--prefer-dist` to download cacheable
# tarballs when possible.
#
- builder:
    name: composer-update
    builders:
     - shell: |
        /srv/deployment/integration/composer/vendor/bin/composer update --no-progress --prefer-dist --profile
