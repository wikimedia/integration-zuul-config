- publisher:
    name: puppet-lint
    publishers:
     - archive:
         artifacts: puppet-lint.log

# Lint whitespace in directory {dir}. Usefull when the Git repository has
# been fetched out in some subdirtory of the Workspace. Example:
#
#  builder:
#    - lint-whitespaces-in:
#       dir: "$WORKSPACE/extensions/Foobar"
#
- builder:
    name: lint-whitespaces-in
    builders:
        - shell: "git --work-tree=\"{dir}\" diff --color --check HEAD^..HEAD"

# Lint whitespaces under $WORKSPACE. This is most probably the one you
# want to use. Example:
#
# builder:
#  - lint-whitespaces
#
- builder:
    name: lint-whitespaces
    builders:
     - lint-whitespaces-in:
        dir: '$WORKSPACE'

- builder:
    name: jshint
    builders:
     - shell: |
        /srv/deployment/integration/slave-scripts/bin/jshint --version
        /srv/deployment/integration/slave-scripts/bin/jshint .

- builder:
    name: jsonlint
    builders:
     - shell: /srv/deployment/integration/slave-scripts/bin/json-lint.php .

# ALWAYS pair with 'global-teardown'
- builder:
    name: npm-install
    builders:
    - shell: |
        . /srv/deployment/integration/slave-scripts/bin/npm-setup.sh
        node --version
        npm --version
        rm -rf node_modules
        npm install

# ALWAYS pair with 'global-teardown'
- builder:
    name: npm
    builders:
    - shell: |
        . /srv/deployment/integration/slave-scripts/bin/npm-setup.sh
        node --version
        npm --version
        rm -rf node_modules
        npm install
        npm test

# The npm-run macro is intended to be used when multiple scripts are used
# together (e.g. 'doc' and later 'test'). If you simply need to run
# npm-install and npm-run-test, use the plain 'npm' macro instead.
#
# MUST run npm-setup.sh before this (e.g. via npm-install macro)
#
# ALWAYS pair with 'global-teardown'
#
# Example:
# builders:
#  - npm-run:
#      script: doc
#
- builder:
    name: npm-run
    builders:
     - shell: |
        . /srv/deployment/integration/slave-scripts/bin/npm-set-env.sh
        npm run-script {script}

# Variant that can use a deploy repo for the dependencies.
# See macro setup-npm-oid below.
#
# ALWAYS pair with 'global-teardown'
- builder:
    name: npm-oid
    builders:
     - setup-npm-oid:
         repository: '{repository}'
     - shell: |
         . /srv/deployment/integration/slave-scripts/bin/npm-set-env.sh
         # node_modules is not purged, taken care of by setup-npm-oid

         node --version
         npm --version
         . npm-oid.env

         echo "Injecting dev dependencies from source repo into deploy node_modules"
         /srv/deployment/integration/slave-scripts/bin/npm-install-dev.py

         cd "$NPM_SET_PATH"  # for deploy: ./src
         npm test

# MUST run 'global-setup' before this
- builder:
    name: doxygen
    builders:
     - shell: |
         . /srv/deployment/integration/slave-scripts/bin/global-set-env.sh
         rm -rf doc/html
         doxygen

# Intended for use in jobs that use composer-update
#
# MUST run 'global-setup' before this
- builder:
    name: phpunit-coverage
    builders:
    # Use php5 instead of php (hhvm) because it doesn't do coverage
    # as well as php5-xdebug. And also slow.
     - shell: |
         . /srv/deployment/integration/slave-scripts/bin/global-set-env.sh
         rm -rf coverage
         php5 ./vendor/bin/phpunit --coverage-html coverage/

# ALWAYS pair with 'global-teardown'
- builder:
    name: global-setup
    builders:
     - shell: "/srv/deployment/integration/slave-scripts/bin/global-setup.sh"

- publisher:
    name: global-teardown
    publishers:
     - postbuildscript:
         builders:
          - shell: "/srv/deployment/integration/slave-scripts/bin/global-teardown.sh"
         # Postbuild options are confusing, setting both to false ensures the script always runs.
         onsuccess: False
         onfailure: False

# cxserver and parsoid services come with two repositories:
# eg
# mediawiki/services/cxserver: the actual source code
# mediawiki/services/cxserver/deploy : node modules + code under /src/
#
# We share the job-templates describing tests commands to run, the
# setup-npm-oid macro would contains environment variable pointing to the
# source `tests` directory and set the NODE_PATH
#
# Once used, subsequent shell commands should load the env variables by using:
#   . npm-oid.env
#
# Note we run `npm install` so we better have npm installed (ie on labs)
#
# ALWAYS pair with 'global-teardown'
- builder:
    name: setup-npm-oid
    builders:
     - shell: |
        . /srv/deployment/integration/slave-scripts/bin/npm-setup.sh
        rm -f npm-oid.env

        case "{repository}" in
        "source")
            NPM_SET_PATH="."
            echo "Running npm install"
            rm -rf node_modules
            npm install
            ;;
        "deploy")
            NPM_SET_PATH="./src"
            # All modules should already be in the deploy repo, no npm install

            # grunt.loadNpmTasks() does not honor NODE_PATH so fake it
            # https://github.com/gruntjs/grunt-cli/pull/18
            # https://phabricator.wikimedia.org/T92369
            ln -fs "$WORKSPACE/node_modules" "$NPM_SET_PATH/node_modules"
            ;;
        *)
            echo "JJB {{repository}} parameter '{repository}' is not recognized."
            exit 1
            ;;
        esac
        echo "NPM_SET_PATH=$NPM_SET_PATH" >> npm-oid.env
        echo 'NODE_PATH=$NODE_PATH:'"$WORKSPACE/node_modules" >> npm-oid.env
        echo 'PATH=$PATH:'"$WORKSPACE/node_modules/.bin" >> npm-oid.env

- builder:
    name: assert-env-doc_subpath
    builders:
     - shell: |
         if [ -z $DOC_SUBPATH ]; then
             echo "\$DOC_SUBPATH is missing. Can not publish."
             exit 1
         fi

# Assert 'php' is phpflavor
#
# Parameter:
# * phpflavor: 'hhvm' or 'zend' or 'php53'
#
- builder:
    name: assert-phpflavor
    builders:
        - shell: |
            #!/bin/bash -eu
            PHP_VERSION=`php --version`

            case "{phpflavor}" in
                ( 'hhvm' )
                    MATCHER='^HipHop'
                ;;
                ( 'zend' )
                    MATCHER='^Zend Engine'
                ;;
                ( 'php53' )
                    MATCHER='^PHP 5\.3'
                ;;
                ( 'php55' )
                    MATCHER='^PHP 5\.5'
                    PHP_VERSION=`php5 --version`
                ;;
                ( 'php56' )
                    MATCHER='^PHP 5\.6'
                    PHP_VERSION=`php5 --version`
                ;;
                ( 'php70' )
                    MATCHER='^PHP 7\.0'
                    PHP_VERSION=`php7.0 --version`
                ;;
                ( * )
                    echo "Invalid phpflavor '{phpflavor}' for JJB macro 'assert-phpflavor'"
                    echo "Must be either 'hhvm' or 'zend'"
                    exit 1
                ;;
            esac

            if ( echo "$PHP_VERSION" | egrep "$MATCHER" > /dev/null ); then
                echo -e "php is {phpflavor}:\n\n$PHP_VERSION\n"
            else
                echo -e "Assertion error: php is not {phpflavor}:\n\n$PHP_VERSION\n"
                exit 1
            fi

- builder:
    name: 'hhvm-clear-hhbc'
    builders:
        - shell: |
            rm -f *.hhbc

# Assert node version matches a basic regular expressions
#
# Parameter:
# * version: passed to `grep`
#
- builder:
    name: assert-node-version
    builders:
     - shell: |
         #!/bin/bash -e -u
         NODE_VERSION=`node --version`

         if ( echo "$NODE_VERSION" | grep "{version}" > /dev/null )
         then
             echo "Node version $NODE_VERSION matches '{version}'"
         else
             echo "Assertion error: node version $NODE_VERSION does not match '{version}'"
             exit 1
         fi

- builder:
    name: assert-node-version-0.8
    builders:
     - assert-node-version:
         version: ^v0[.]8[.]

- builder:
    name: assert-node-version-0.10
    builders:
     - assert-node-version:
         version: ^v0[.]10[.]

- builder:
    name: assert-node-version-4
    builders:
     - assert-node-version:
         version: ^v4[.]

- builder:
    name: jsduck
    builders:
     - shell: |
        echo "Running JSDuck..."
        jsduck --version
        jsduck

# Expose the current MediaWiki install path in http://localhost:9412
#
# ALWAYS pair with 'localhost-cleanup'
- builder:
    name: prepare-localhost
    builders:
     - shell: |
        # Load context (e.g. MW_INSTALL_PATH, MW_SERVER, MW_SCRIPT_PATH)
        . /srv/deployment/integration/slave-scripts/bin/mw-set-env-localhost.sh

        # Configure MediaWiki
        echo -e \
         "<?php\n\$wgServer = '${MW_SERVER}';\n"\
         "\$wgScriptPath = '${MW_SCRIPT_PATH}';\n"\
         "\$wgScript = \$wgStylePath = \$wgLogo = false;\n"\
         "\$wgResourceBasePath = null;\n"\
         "\$wgEnableJavaScriptTest = true;\n?>\n" >> "$MW_INSTALL_PATH/LocalSettings.php"

        # The location is free or we make it free
        PUBLIC_DIR="/srv/localhost-worker/$BUILD_TAG"
        test ! -e "$PUBLIC_DIR" || rm "$PUBLIC_DIR";

        # Publish our install in the QUnit server document root
        ln -s "$MW_INSTALL_PATH" "$PUBLIC_DIR"

        # Fetch headers and content preview for debugging (HTTP 500 Error, Database error, ResourceLoader etc.)
        # NB: Uses 'tac' twice to exhaust buffer before using 'head' to avoid "curl: Failed writing body" error.
        curl --include "${MW_SERVER}${MW_SCRIPT_PATH}/index.php/Special:BlankPage" | tac|tac | head -n42
        curl --include "${MW_SERVER}${MW_SCRIPT_PATH}/load.php?debug=true&modules=startup&only=scripts" | tac|tac | head -n42

# qunit
#
# ALWAYS pair with 'localhost-cleanup'
# ALWAYS pair with 'global-teardown' (for npm-setup)
- builder:
    name: qunit-karma
    builders:
    builders:
     - prepare-localhost
     - shell: |
        . /srv/deployment/integration/slave-scripts/bin/mw-set-env-localhost.sh
        cd $MW_INSTALL_PATH
        . /srv/deployment/integration/slave-scripts/bin/npm-setup.sh
        rm -rf node_modules
        npm install
        ./node_modules/.bin/grunt karma:main

- publisher:
    name: localhost-cleanup
    publishers:
     - postbuildscript:
         builders:
           - shell: |
               rm -f "/srv/localhost-worker/$BUILD_TAG"
         # Postbuild options are confusing, setting both to false ensures the script always runs.
         onsuccess: False
         onfailure: False

# mw-selenium
#
# Run MW-Selenium tests that are marked with the @integration tag against a
# local instance of MediaWiki. All setup of intial state for these kinds of
# tests should be done by the test suite via the API, including creation of
# the test user.
#
# - tests-dir: Parent of the `features` directory. Usually `tests/browser`.
#
# ALWAYS pair with 'localhost-cleanup'
# ALWAYS pair with 'mw-selenium-cleanup'
#
- builder:
    name: mw-selenium-with-dir
    builders:
     - prepare-localhost
     - bundle-with-options:
        initialization: '/srv/deployment/integration/slave-scripts/bin/mw-selenium-setup.sh'
        command: |
          cucumber --color --tags @integration --tags ~@skip --format pretty \
            --format junit --out $WORKSPACE/log/junit
        dir: '{tests-dir}'
        bundler-version: ''

# Run MW-Selenium tests located in a standard location, `tests/browser` beneath
# the MW extension directory. Note that EXT_NAME is set by
# zuul/ext_dependencies.py
#
# ALWAYS pair with 'localhost-cleanup'
# ALWAYS pair with 'mw-selenium-cleanup'
#
- builder:
    name: mw-selenium
    builders:
     - mw-selenium-with-dir:
        tests-dir: 'src/extensions/$EXT_NAME/tests/browser'

# Cleans up anything left under /tmp/jenkins-$EXECUTOR_NUMBER
#
# Note that once the bug with Xvfb and TMPDIR is resolved, this can be
# removed. See the bin/mw-set-env-mw-selenium.sh slave script for details.
#
- publisher:
    name: mw-selenium-cleanup
    publishers:
     - postbuildscript:
         builders:
           - shell: '/srv/deployment/integration/slave-scripts/bin/mw-selenium-teardown.sh'
         # Postbuild options are confusing, setting both to false ensures the script always runs.
         onsuccess: False
         onfailure: False

# - src: (without trailing slash)
# - project: (usually repo name or a custom title like "VisualEditor") - will be escaped
# - version: (usually branch name) - will be escaped
- builder:
    name: documentation-sync
    builders:
     - documentation-sync-subdir:
        src: '{src}'
        project: '{project}'
        version: '{version}'
        subdir: ''

# Is there a way to make the jjb/yaml "{subdir}" param optional?
# Then we could make it default to empy string instead of creating
# a separate builder
# - subdir: (must have trailing slash) - will not be escaped
- builder:
    name: documentation-sync-subdir
    builders:
     - shell: |
        # Set destination and version directory therein
        DEST_DIR="/srv/org/wikimedia/doc"
        DEST_PROJECTDIR=`echo "{project}" | tr '/' '-'`
        DEST_VERSIONDIR=`echo "{version}" | tr '/' '-'`
        DEST_EXTRAPATH="{subdir}"
        # Ensure the destination exists
        mkdir -p "$DEST_DIR/$DEST_PROJECTDIR/$DEST_VERSIONDIR/$DEST_EXTRAPATH"
        # Publish it (trailing slash is important!)
        rsync --recursive --delete-after --force {src}/ "$DEST_DIR/$DEST_PROJECTDIR/$DEST_VERSIONDIR/$DEST_EXTRAPATH"

- builder:
    name: mw-apply-settings
    builders:
     - shell: "/srv/deployment/integration/slave-scripts/bin/mw-apply-settings.sh"

- builder:
    name: mw-fetch-composer-dev
    builders:
     - shell: "/srv/deployment/integration/slave-scripts/bin/mw-fetch-composer-dev.sh"

- builder:
    name: mw-run-update-script
    builders:
        - shell: "/srv/deployment/integration/slave-scripts/bin/mw-run-update-script.sh"

# ALWAYS pair with 'mw-teardown' publisher to ensure we don't leave temporary files behind
- builder:
    name: mw-setup
    builders:
        - shell: "/srv/deployment/integration/slave-scripts/bin/mw-setup.sh"

# ALWAYS pair with 'mw-teardown-sqlite' publisher to ensure we don't leave temporary files behind
- builder:
    name: mw-install-sqlite
    builders:
     - shell: "/srv/deployment/integration/slave-scripts/bin/mw-install-sqlite.sh"

# ALWAYS pair with 'mw-teardown-mysql' publisher to ensure we don't leave temporary files behind
- builder:
    name: mw-install-mysql
    builders:
     - shell: "/srv/deployment/integration/slave-scripts/bin/mw-install-mysql.sh"

- publisher:
    name: mw-teardown
    publishers:
     - postbuildscript:
         builders:
          - shell: "/srv/deployment/integration/slave-scripts/bin/mw-teardown.sh"
         # Postbuild options are confusing, setting both to false ensures the script always runs.
         onsuccess: False
         onfailure: False

- publisher:
    name: mw-teardown-sqlite
    publishers:
     - postbuildscript:
         builders:
          - shell: "/srv/deployment/integration/slave-scripts/bin/mw-teardown.sh"
         onsuccess: False
         onfailure: False

- publisher:
    name: mw-teardown-mysql
    publishers:
     - postbuildscript:
         builders:
          - shell: "/srv/deployment/integration/slave-scripts/bin/mw-teardown-mysql.sh"
         # Postbuild options are confusing, setting both to false ensures the script always runs.
         onsuccess: False
         onfailure: False

- builder:
    name: mw-run-phpunit-allexts
    builders:
      - shell: '/srv/deployment/integration/slave-scripts/bin/mw-run-phpunit-allexts.sh'

# Generic phpunit builder, output junit log
# Should be used with publisher 'phpunit-junit'
- builder:
    name: phpunit-junit
    builders:
     - shell: 'mkdir -p log && /srv/deployment/integration/phpunit/vendor/bin/phpunit --log-junit log/junit-phpunit.xml'

# Publish PHPUnit junit results as generated by phpunit-junit builder
- publisher:
    name: phpunit-junit
    publishers:
     - xunit:
        types:
         - phpunit:
            pattern: 'log/junit-phpunit.xml'

# Used
- publisher:
    name: phpunit-junit-2
    publishers:
     - xunit:
        types:
         - phpunit:
            pattern: 'log/junit-mw-phpunit.xml'

- builder:
    name: phplint
    builders:
     - shell: |
        . /srv/deployment/integration/slave-scripts/bin/global-set-env.sh
        $PHP_BIN -v
        /srv/deployment/integration/slave-scripts/bin/git-changed-in-head php php5 inc phtml module install \
        | xargs -n1 -t $PHP_BIN -l

- builder:
    name: tox
    builders:
     - shell: |
        rm -fR log
        mkdir -p log
        set -o pipefail
        PY_COLORS=1 tox -v -e "{venv}" | tee "log/{venv}.log"
        set +o pipefail

- builder:
    name: tox-all-envs
    builders:
     - shell: |
         rm -fR log
         mkdir -p log
         set -o pipefail
         PY_COLORS=1 tox -v | tee "log/stdout.log"
         set +o pipefail

- publisher:
    name: archive-log-dir
    publishers:
     - archive:
        artifacts: 'log/*'

- publisher:
    name: archive-log-allow-empty
    publishers:
     - archive:
        artifacts: 'log/*'
        allow-empty: true

# Validate a composer.json
- builder:
    name: composer-validate
    builders:
     - shell: |
        set -u
        cd "{dir}"
        [[ -f "composer.json" ]] || exit 0
        composer --ansi validate --no-check-publish

# Validate a composer.json so it can be published on packagist.org
- builder:
    name: composer-validate-package
    builders:
     - shell: |
        composer --ansi validate

# Example:
#
# builder:
#  - composer-update:
#     dir: 'src'
#
# Notes:
# `composer update` is being passed `--prefer-dist` to download cacheable
# tarballs when possible.
#
- builder:
    name: composer-update
    builders:
     - shell: |
        set -u
        cd "{dir}"
        [[ -f "composer.json" ]] || exit 0
        composer update --ansi --no-progress --prefer-dist --profile -v

- builder:
    name: composer-update-no-dev
    builders:
     - shell: |
        composer update --ansi --no-progress --prefer-dist --profile --no-dev

- builder:
    name: composer-local-create
    builders:
     - shell: |
        set -u
        cd src
        /srv/deployment/integration/slave-scripts/bin/mw-create-composer-local.py "{deps}" composer.local.json

# Runs "composer test"
- builder:
    name: composer-test
    builders:
     - shell: |
        [[ -f "composer.json" ]] || exit 0
        COMPOSER_PROCESS_TIMEOUT=600 composer --ansi test
