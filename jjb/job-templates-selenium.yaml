- job-template:
    name: 'selenium-{name}'
    project-type: matrix
    path_to_ci_yml: tests/browser/ci.yml
    yaml-strategy:
      exclude-key: 'exclude'
      filename: '{path_to_ci_yml}'
    axes:
      - axis:
          type: label-expression
          name: label
          values:
            - contintLabsSlave && UbuntuTrusty
      - axis:
          name: BROWSER
          type: yaml
          filename: '{path_to_ci_yml}'
      - axis:
          name: MEDIAWIKI_ENVIRONMENT
          type: yaml
          filename: '{path_to_ci_yml}'
      - axis:
          name: PLATFORM
          type: yaml
          filename: '{path_to_ci_yml}'

    node: contintLabsSlave && UbuntuTrusty
    repository_host: 'gerrit.wikimedia.org/r'

    properties:
     - build-discarder:
         days-to-keep: 31  # ~ 2 * 2 weeks sprints

    scm:
      - git:
          url: https://{repository_host}/{repository}
          branches:
            - master
          wipe-workspace: false  # keep the workspace...
          clean:
              after: true        # ... and use git clean instead
          prune: true            # prune remote obsoletes branches
          submodule:
              recursive: true

    triggers:
      - timed: "@daily"

    builders:
      - shell: mkdir -p "$WORKSPACE/log/junit"
      - shell: |
          # Attempt to figure out MediaWiki branch being used and fetch it out
          # if the extension has the same branch
          if [[ "$MEDIAWIKI_ENVIRONMENT" == "beta"* ]]; then
            export MEDIAWIKI_API_URL="https://en.wikipedia.beta.wmflabs.org/w/api.php"
          elif [ "$MEDIAWIKI_ENVIRONMENT" = "mediawiki" ]; then
            export MEDIAWIKI_API_URL="https://www.mediawiki.org/w/api.php"
          elif [ "$MEDIAWIKI_ENVIRONMENT" = "test" ]; then
            export MEDIAWIKI_API_URL="https://test.wikipedia.org/w/api.php"
          else
            echo "MEDIAWIKI_ENVIRONMENT $MEDIAWIKI_ENVIRONMENT not supported!"
            exit 1
          fi
          MEDIAWIKI_GIT_BRANCH=$(/srv/deployment/integration/slave-scripts/bin/mw-api-siteinfo.py "$MEDIAWIKI_API_URL" git_branch)

          git checkout -f "origin/$MEDIAWIKI_GIT_BRANCH" || {{
              echo "origin/$MEDIAWIKI_GIT_BRANCH branch does not exist."
              echo "Fallbacking to master branch..."
              MEDIAWIKI_GIT_BRANCH='master'
              git checkout -f origin/$MEDIAWIKI_GIT_BRANCH
          }}
          git reset --hard "origin/$MEDIAWIKI_GIT_BRANCH"
          git clean -x -q -d -f
      - shell: |
          # install dependencies
          export GEM_HOME="$HOME/.gem/2.0.0"
          mkdir -p vendor
          gem2.0 install --env-shebang -i vendor bundler --no-ri --no-rdoc
          export GEM_PATH="`pwd`/vendor"
          "$WORKSPACE"/vendor/bin/bundle install --verbose

          # credentials
          export SAUCE_ONDEMAND_USERNAME=wikimedia-jenkins
          if [[ "$MEDIAWIKI_ENVIRONMENT" == "beta"* ]]; then
            echo MEDIAWIKI_PASSWORD="\$selenium_user_beta"
            set +x
            export MEDIAWIKI_PASSWORD="$selenium_user_beta"
            set -x
          elif [ "$MEDIAWIKI_ENVIRONMENT" = "mediawiki" ] || [ "$MEDIAWIKI_ENVIRONMENT" = "test" ]; then
            echo MEDIAWIKI_PASSWORD="\$selenium_user_production"
            set +x
            export MEDIAWIKI_PASSWORD="$selenium_user_production"
            set -x
          else
            echo "MEDIAWIKI_ENVIRONMENT $MEDIAWIKI_ENVIRONMENT not supported!"
            exit 1
          fi

          # run the tests
          "$WORKSPACE"/vendor/bin/bundle exec rake selenium

    publishers:
      - junit:
          results: 'log/junit/*.xml'

      - email-ext:
          recipients: '{recipients}'
          body: '${{SCRIPT, template="wikimedia.template"}}'

      - browsertests-irc

      - claim-build

      - performance:
          failed-threshold: -1
          unstable-threshold: -1
          report:
           - junit: log/junit/*.xml

      - archive:
          artifacts: 'log/*.log, log/junit/*.xml, log/report.html, log/*.png'

      - postbuildscript:
          builders:
           - shell: |
               set +e
               set +x
               echo "Removing potential png screenshots under /log/"
               rm -v -f log/*.png || :
               echo "Done"
          # Postbuild options are confusing, setting both to false ensures the script always runs.
          onsuccess: False
          onfailure: False

    wrappers:
      - ansicolor
      - timeout:
          timeout: 180
      - timestamps
      # Wiki usernames and passwords are hold in Jenkins credentials store
      # https://integration.wikimedia.org/ci/credential-store/domain/selenium/
      - credentials-binding:
          - text:
              credential-id: mediawiki-captcha-bypass-password
              variable: MEDIAWIKI_CAPTCHA_BYPASS_PASSWORD
          - text:
              credential-id: selenium-user-beta
              variable: selenium_user_beta
          - text:
              credential-id: selenium-user-production
              variable: selenium_user_production
          - text:
              credential-id: sauce-ondemand-access-key
              variable: SAUCE_ONDEMAND_ACCESS_KEY
