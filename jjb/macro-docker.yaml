# Create a log directory that will be
# mounted into a container with --volume
- builder:
    name: docker-log-dir
    builders:
     - docker-wipe-dir:
         dir: log

# Delete everything in $WORKSPACE. This should generally be used as the final
# publisher for all Docker based jobs.
- publisher:
    name: docker-wipe-workspace
    publishers:
     # Run via Docker as root to have sufficient permission to delete files of
     # any owner within the workspace directory and use `find` which more
     # handily processes dotfiles. Then delete the workspace directory itself.
     - postbuildscript:
         script-only-if-succeeded: false
         script-only-if-failed: false
         builders:
           - docker-run:
              image: 'docker-registry.wikimedia.org/wikimedia-stretch:latest'
              options: >-
                --user=root
                --volume "$WORKSPACE":/workspace
                --entrypoint=/usr/bin/find
              args: >-
                "/workspace" -mindepth 1 -delete
           - shell: |
              set -u
              rmdir "$WORKSPACE"

# Create a src directory that will be
# mounted into a container with --volume
- builder:
    name: docker-src-dir
    builders:
     - docker-wipe-dir:
         dir: src

# Delete content of a directory under $WORKSPACE as 'nobody'
- builder:
    name: docker-wipe-dir
    builders:
     - shell: |
         set -eux
         mkdir -m 2777 -p "{dir}"
     - docker-run:
        image: 'docker-registry.wikimedia.org/wikimedia-stretch:latest'
        options: >-
          --user=nobody
          --volume "$WORKSPACE":/workspace
          --entrypoint=/usr/bin/find
        args: >-
          "/workspace/{dir}" -mindepth 1 -delete

# Create a cache directory that will be
# mounted into a container with --volume
- builder:
    name: docker-cache-dir
    builders:
     - shell: |
        mkdir -m 2777 -p "cache"

# Run a Docker container using `docker run`. This builder should be used
# wherever possible to ensure the proper common arguments that allow for
# correct signal passing and cleanup are passed.
- builder:
    name: docker-run
    builders:
     - shell: |
        #!/bin/bash
        set -eux
        exec docker run {obj:options|} \
          --rm \
          --env-file <(/usr/bin/env|egrep -v '^(HOME|SHELL|PATH|LOGNAME|MAIL|HHVM_REPO_CENTRAL_PATH)=') \
          '{image}' {obj:args|}
        # nothing else can be executed due to exec


# Run a docker image with .env and a log
- builder:
    name: docker-run-with-log
    builders:
     - docker-run:
        options: >-
          {obj:options|}
          --volume "$(pwd)"/log:{logdir}
        image: '{obj:image}'
        args: '{obj:args|}'

# Run a docker image with .env and a log and cache directory
#
# Parameters:
#
# image: the Docker image to run (eg: releng/php)
# args (optional): arguments passed to `docker run`.
- builder:
    name: docker-run-with-log-and-workspace-cache
    builders:
     - docker-run-with-log:
        options: >-
          {obj:options|}
          --volume "$(pwd)"/cache:/cache
        image: '{obj:image}'
        args: '{obj:args|}'
        logdir: '{obj:logdir}'

# Run a docker image with cache, log, and src directories
#
# Parameter:
#
# image: the Docker image to run (eg: releng/php)
# args (optional): arguments passed to `docker run`.
- builder:
    name: docker-run-with-log-cache-src
    builders:
     - shell: |
        #!/bin/bash -eu
        set -x
        chmod 2777 src
     - docker-run-with-log-and-workspace-cache:
        options: >-
          {obj:options|}
          --volume "$(pwd)"/src:/src
        image: '{obj:image}'
        args: '{obj:args|}'
        logdir: '{obj:logdir}'

# Use a docker image to clone for a MediaWiki extension or skin
- builder:
    name: docker-ci-src-setup-mwext
    builders:
     - docker-run:
        options: >-
          --volume "$(pwd)"/src:/src
          --volume "$(pwd)"/cache:/cache
          --volume /srv/git:/srv/git
          --entrypoint "bash"
        image: 'docker-registry.wikimedia.org/releng/ci-src-setup:0.2.8'
        args: '/srv/setup-mwext.sh'

# Use a docker image to clone for MediaWiki core
- builder:
    name: docker-ci-src-setup-mw
    builders:
     - docker-run:
        options: >-
          --volume "$(pwd)"/src:/src
          --volume "$(pwd)"/cache:/cache
          --volume /srv/git:/srv/git
          --entrypoint "bash"
        image: 'docker-registry.wikimedia.org/releng/ci-src-setup:0.2.8'
        args: '/srv/setup-mw.sh'

# Use a docker image to clone the repository into /src
- builder:
    name: docker-ci-src-setup-simple
    builders:
     - docker-run:
        options: >-
          --volume "$(pwd)"/src:/src
          --volume "$(pwd)"/cache:/cache
          --volume /srv/git:/srv/git
        image: 'docker-registry.wikimedia.org/releng/ci-src-setup-simple:0.2.0'

- builder:
    name: docker-zuul-cloner
    builders:
     - docker-src-dir
     - docker-run:
        options: >-
          --volume "$(pwd)"/src:/src
          --volume /srv/git:/srv/git:ro
        image: 'docker-registry.wikimedia.org/releng/zuul-cloner:0.1.1'
        args: >-
          --color --verbose
          --map /zuul-clonemap.yaml
          --workspace /src
          --cache-dir /srv/git
          https://gerrit.wikimedia.org/r/p
          {projects}
