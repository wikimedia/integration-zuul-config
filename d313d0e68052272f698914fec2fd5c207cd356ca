{
  "comments": [
    {
      "key": {
        "uuid": "6e936f18_4ff3dde2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 34
      },
      "writtenOn": "2014-11-19T17:51:48Z",
      "side": 1,
      "message": "Can you clarify this more? I\u0027m not sure I see the connection between a composer argument and what Zuul cloner is doing.\n\ngrammar: invocation\"s\"",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_cf2e0d3e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 34
      },
      "writtenOn": "2014-11-19T17:51:48Z",
      "side": 1,
      "message": "typo: directories directories",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_6f21f949",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 34
      },
      "writtenOn": "2014-11-19T17:51:48Z",
      "side": 1,
      "message": "grammar: should be \"write test results, which can then be ..\", omit \"to\".",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_6f3c998e",
        "filename": "jjb/defaults.yaml",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 34
      },
      "writtenOn": "2014-11-19T17:47:06Z",
      "side": 1,
      "message": "I\u0027m confused. What kind of variables? Which jobs? This looks like a regular macro template parameter, like we do else where. Why would it need to be in defaults?",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_0f1075f6",
        "filename": "jjb/defaults.yaml",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 34
      },
      "writtenOn": "2014-11-19T17:51:48Z",
      "side": 1,
      "message": "PS: Ah, right. This is for the default value of that. Interesting. Should we use this pattern instead of the \"foo\" and \"foo-in\" patterns we have elsewhere? I\u0027m not sure it\u0027s an improvement to dump those here (at the additional cost of prefixing them).",
      "parentUuid": "6e936f18_6f3c998e",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_ac45b948",
        "filename": "jjb/defaults.yaml",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 24
      },
      "writtenOn": "2014-11-21T21:01:59Z",
      "side": 1,
      "message": "I patched JJB a few months ago to pass key/values as variables to job templates:\n\nhttp://ci.openstack.org/jenkins-job-builder/definition.html#defaults\nhttps://review.openstack.org/#/c/100020/\n\nThat is a bit of a hack, but let us define default value for variables. That will indeed let us remove the templates such as:\n\n builders\n     - shell: cd {dir}\n\nWe could define  dir: \u0027.\u0027",
      "parentUuid": "6e936f18_0f1075f6",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_4c79abc1",
        "filename": "jjb/job-templates.yaml",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1001
      },
      "writtenOn": "2014-11-19T17:13:22Z",
      "side": 1,
      "message": "Rogue colon at the end of this line?",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_6cd7b150",
        "filename": "jjb/job-templates.yaml",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 24
      },
      "writtenOn": "2014-11-21T21:01:59Z",
      "side": 1,
      "message": "The colon is needed, but is missing in the next definition...",
      "parentUuid": "6e936f18_4c79abc1",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_8cda3d76",
        "filename": "jjb/job-templates.yaml",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 24
      },
      "writtenOn": "2014-11-21T21:01:59Z",
      "side": 1,
      "message": "... there the line is missing a trailing colon.",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_cf604da2",
        "filename": "jjb/job-templates.yaml",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 34
      },
      "writtenOn": "2014-11-19T17:47:06Z",
      "side": 1,
      "message": "Why would we need a separate command for phpunit? Surely phpunit is specified in composer.json as \"test\"? Just like we do for npm.",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_ccc5a55f",
        "filename": "jjb/job-templates.yaml",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 24
      },
      "writtenOn": "2014-11-21T21:01:59Z",
      "side": 1,
      "message": "The test command is too generic and would not let us define Jenkins publishers that matches the commands being executed.\n\nThe next patch pass to the phpunit command name extra args to generate the a JUnit output:\n\n https://gerrit.wikimedia.org/r/#/c/174411/2/jjb/misc.yaml,unified\n\nAnd the patch after ( https://gerrit.wikimedia.org/r/#/c/174412/ ) uses a dirty hack to pass JJB publishers macros to the job.  Ie use the Xunit plugin to interpret the output of the junit-phpunit.xml\n\n\nThe reason I did that is that if you define a single \u0027test\u0027 run script that runs several commands and invoke it with:\n\n   composer test -- --some-opt\n\n--some-opt is passed to EACH command.  Which is not going to play nice.\n\nBy having the job named phpunit, it makes it clear we expect phpunit to be run.",
      "parentUuid": "6e936f18_cf604da2",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ea06b5a_ab84b5a4",
        "filename": "jjb/job-templates.yaml",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 34
      },
      "writtenOn": "2014-11-23T23:50:42Z",
      "side": 1,
      "message": "What other kind of arguments would we pass? Do we even need the jUnit one? Can\u0027t say I\u0027ve ever used it for anything useful. The build trend detection in Jenkins for regular test pipeline jobs is useless since there\u0027s no meaningful relationship between any two patches (they\u0027re all arbitrary proposed patches, for different branches, sometimes even for different repositories). And for regression jobs, they should always be green, and we detect failures via the command line. We don\u0027t need graphs showing the number of failures over time since we apply zero tolerance.\n\nMy point being, it\u0027d be really useful to be able to run \u0027composer test\u0027 in any php project and have it run all the relevant tests without having to know where the tests are, what linter/checker/unit test to run, and just have it work.\n\nThat way local developers don\u0027t have to run \u0027composer test \u0026\u0026 composer phpunit\u0027. And semantically it\u0027d make sense for \u0027test\u0027 to include... tests.\n\nExamples:\n\n* https://github.com/cssjanus/php-cssjanus\n* https://github.com/wikimedia/nagf\n* https://github.com/Krinkle/intuition\n* https://github.com/wikimedia/simplei18n\n\nI agree there can be cases in theory where we want the Jenkins run to be different than what people would run locally, but so far I\u0027ve been able to avoid that with npm-test and believe we can maintain that without any hacks for composer as well. At least I\u0027d like to try avoid making it natural to have exceptions by design (unless there are cases that call for it already).",
      "parentUuid": "6e936f18_ccc5a55f",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ea06b5a_e34d0141",
        "filename": "jjb/job-templates.yaml",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 24
      },
      "writtenOn": "2014-11-24T17:08:09Z",
      "side": 1,
      "message": "The --log-junit is used to generate test report for each build such as:\n\nhttps://integration.wikimedia.org/ci/job/mediawiki-phpunit/438/testReport/\n\nWhich gives you a nice view of all tests failing along with the output for that test and the stacktrace (ex: https://integration.wikimedia.org/ci/job/mediawiki-phpunit/438/testReport/(root)/TextPassDumperTest/testPrefetchPlain/ ).\n\nThe trend result is indeed useless.\n\n-------\n\nThat being said, we could have PHPUnit arguments passed via an environment variable:\n\n    {\n        \"scripts\": {\n            \"test\": [\n                \"echo Running php linting\",\n                \"echo Running PHPUnit $PHPUNIT_ARGS\"\n            ]\n        }\n    }\n\nAnd have Jenkins (or a developer) uses:\n\n PHPUNIT_ARGS\u003d\"\u0027--log-junit log/phpunit-junit.xml\u0027\" composer test\n\n\nTo set that env variable in Jenkins we can define in the job template a new parameter that will be applied on any composer job:\n\n parameters:\n   - string:\n       name: PHPUNIT_ARGS\n       default: \u0027--log-junit log/phpunit-junit.xml\u0027\n\nThat is easy and straightforward. Although that will define that env variable for any composer job, we will not have to repeat it on each job.\n\n\nWith that, we can use \u0027test\u0027 as the entry point and still define the extra arguments Jenkins require when running PHPUnit.",
      "parentUuid": "4ea06b5a_ab84b5a4",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ea06b5a_832f5df3",
        "filename": "jjb/job-templates.yaml",
        "patchSetId": 1
      },
      "lineNbr": 81,
      "author": {
        "id": 34
      },
      "writtenOn": "2014-11-24T17:48:27Z",
      "side": 1,
      "message": "That strack trace has nothing to do with jUnit. The same is included in the regular phpunit output that is directly linked from Gerrit:\n\n2) TextPassDumperTest::testPrefetchPlain\nText of node sha1\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-\u0027nktofwzd0tl192k3zfepmlzxoax1lpe\u0027\n+\u0027cb0ogj4bs104hmat6pq904c1wu5rw1h\u0027\n\n/srv/ssd/jenkins-slave/workspace/mediawiki-phpunit@2/src/tests/phpunit/maintenance/DumpTestCase.php:257\n/srv/ssd/jenkins-slave/workspace/mediawiki-phpunit@2/src/tests/phpunit/maintenance/DumpTestCase.php:349\n/srv/ssd/jenkins-slave/workspace/mediawiki-phpunit@2/src/tests/phpunit/maintenance/backupTextPassTest.php:224\n/srv/ssd/jenkins-slave/workspace/mediawiki-phpunit@2/src/tests/phpunit/MediaWikiTestCase.php:141\n\nExcuse my pun, but how is it useful to go from console -\u003e status -\u003e (jUnit) Test Result -\u003e Failing tests -\u003e testPrefetchPlain to see the same thing?",
      "parentUuid": "4ea06b5a_e34d0141",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_8f3fa581",
        "filename": "jjb/job-templates.yaml",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 34
      },
      "writtenOn": "2014-11-19T17:47:06Z",
      "side": 1,
      "message": "rm -rf?",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_cc4a8527",
        "filename": "jjb/job-templates.yaml",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 24
      },
      "writtenOn": "2014-11-21T21:01:59Z",
      "side": 1,
      "message": "Per POSIX -R is the recursive option, -r is the equivalent http://pubs.opengroup.org/onlinepubs/009604499/utilities/rm.html \n\nOn BSD systems the man page states -R and I learned to use -R :D",
      "parentUuid": "6e936f18_8f3fa581",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_2f4a112b",
        "filename": "jjb/job-templates.yaml",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 34
      },
      "writtenOn": "2014-11-19T17:47:06Z",
      "side": 1,
      "message": "-p should not be needed. They are not nested and should not exist at this point. Prefer strict.",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_4c0d15ea",
        "filename": "jjb/job-templates.yaml",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 24
      },
      "writtenOn": "2014-11-21T21:01:59Z",
      "side": 1,
      "message": "I use -p out of habit, since both directories are force removed just above, can be dropped indeed.",
      "parentUuid": "6e936f18_2f4a112b",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e936f18_0c9dcd5a",
        "filename": "jjb/job-templates.yaml",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 24
      },
      "writtenOn": "2014-11-21T21:01:59Z",
      "side": 1,
      "message": "Self note, per Timo, insert there:\n\n composer validate\n\nThat will let us drop the php-composer-validate job from repositories adoption this {name}-composer-phpunit template.",
      "revId": "d313d0e68052272f698914fec2fd5c207cd356ca",
      "serverId": "e9e9afe9-4712-486d-8885-f54b72dd1951",
      "unresolved": false
    }
  ]
}