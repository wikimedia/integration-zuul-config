- hosts: all
  name: Autoconverted job legacy-debian-glue-stretch from old job debian-glue-stretch
  tasks:

    - name: Ensure legacy workspace directory
      file:
        path: '{{ ansible_user_dir }}/workspace'
        state: directory

    - shell:
        cmd: |
          # Clone from Gerrit to $WORKSPACE /source
          #
          # Have to first clone from Gerrit to have all the branches
          # (debian/upstream/master...) to be at their proper tip. The git
          # repositories on the zuul-merger instances have their head set at
          # arbitrary merge commits. Zuul cloner then checkout the
          # appropriate patch.
          #
          # The inlined clone map is to force zuul-cloner to use /source as a
          # workspace, else it would clone under /source/$ZUUL_PROJECT (the
          # default).
          zuul-cloner --version
          echo "*** Nuking previous build source tree ***"
          rm -fR source
          zuul-cloner \
               --color \
               --verbose \
               --workspace source \
               --map <(echo "clonemap: [{name: (.*), dest: .}]") \
               --cache-dir /srv/git \
               https://gerrit.wikimedia.org/r/p \
               "$ZUUL_PROJECT"
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          # jenkins-debian-glue expects the job to be run with the Jenkins
          # git plugin which exposes metadata via GIT_ environement
          # variables.
          #export GIT_BRANCH="$ZUUL_BRANCH"
          export GIT_COMMIT="$ZUUL_COMMIT"
          # generate-git-snapshot checkout -f $GIT_BRANCH but zuul-cloner
          # checkout the patch in a detached branch, not in the local branch
          # $ZUUL_BRANCH
          export GIT_BRANCH="$GIT_COMMIT"

          # Always build against the debian/changelog indicated distribution,
          # gives freedom to developers to pick the Distribution the package
          # will be build against.
          if [ -n "stretch" ]; then
              echo '*** Jenkins job sets distribution=stretch thus not parsing debian/changelog ***'
              distribution="stretch"
          else
              distribution=$(dpkg-parsechangelog --show-field distribution -lsource/debian/changelog)
              if [ "$distribution" == "UNRELEASED" ]; then
                  # Take the previous one - T181120
                  echo "Found distribution UNRELEASED, using previous release instead"
                  distribution=$(dpkg-parsechangelog  --show-field distribution --count 1 --offset 1 -lsource/debian/changelog)
              fi
              echo "*** Distribution set from debian/changelog to $distribution ***"
          fi
          export distribution

          # FIXME would be for postmerge pipeline later on?
          if [ "$ZUUL_PIPELINE" == "gate-and-submit" ]; then
              export SKIP_DCH=true
          fi

          # Double curly braces are for JJB escaping.
          #
          # $distribution can not contain dashes since it is injected in
          # debian/changelog. Run the command in a subshell to avoid mangling
          # distribution/DIST.
          #
          # DIST is set to have the .changes Distribution field updated.
          # dpkg-genchanges always set it to the entry in debian/changelog
          # but we might have overriden it above. That requires
          # KEEP_SOURCE_CHANGES to be set which leaves behind a
          # _source.changes file.
          #
          (
              DIST="$distribution" \
              distribution=${distribution//-/+} \
              KEEP_SOURCE_CHANGES=1 \
                  /usr/bin/generate-git-snapshot
          )

          # Skip repository setup
          # FIXME: later on we could have postmerge to publish the resulting
          # package to some kind of central repository by using REPOSITORY
          # and REPOS.
          export BUILD_ONLY=yes

          # We set DIST which is used by pbuilderrc to determine whether it a
          # Wikimedia flavor.  We point jenkins-debian-glue cowbuilder path
          # to the canonical image, ie have jessie-wikimedia to point to
          # base-jessie-amd64.cow and init hook
          #
          # Since $WIKIMEDIA is set, the hook will inject apt.wikimedia.org
          #
          # NOTE: build-and-provide-package invokes cowbuilder with sudo
          # which strips out every environment variables. They have to be
          # explicitly whitelisted on Wikitech sudo policy at
          # https://wikitech.wikimedia.org/wiki/Special:NovaSudoer
          #
          # Example:
          #   env_keep+=distribution
          #
          export DIST=$distribution
          . /etc/pbuilderrc

          # Copy Wikimedia and Debian glue hooks under a common directory
          rm -fR pbuilder_hooks
          mkdir pbuilder_hooks
          cp /usr/share/jenkins-debian-glue/pbuilder-hookdir/* pbuilder_hooks/
          [ -d "$HOOKDIR" ] && cp "$HOOKDIR"/* pbuilder_hooks/
          export PBUILDER_HOOKDIR="$(pwd)/pbuilder_hooks/"

          export COWBUILDER_BASE="$BASEPATH"
          export BUILDRESULT="$WORKSPACE/binaries"
          export SKIP_COWBUILDER_UPDATE="true"

          # Prevent our C10shell out from opening a shell on build failure
          export SHELL_ON_FAILURE="no"

          # Use Wikimedia hooks provided by puppet ::package_builder but
          # override some settings such as BUILDRESULT
          #
          # See T141538
          echo "*** Overriding Wikimedia BUILDRESULT ***"
          cat /etc/pbuilderrc > job-pbuilderrc
          echo "BUILDRESULT=$BUILDRESULT" >> job-pbuilderrc

          echo "*** Overriding HOOKDIR ***"
          echo "HOOKDIR=$PBUILDER_HOOKDIR" >> job-pbuilderrc

          if [ "$WIKIMEDIA" == "yes" ]; then
              # Use lintian profile from the build host as provided by
              # package_builder puppet module. T186587
              export USER_BINDMOUNTS="/usr/share/lintian/profiles/wikimedia /usr/share/lintian/vendors/wikimedia"
              export LINTIAN_OPTIONS="--profile wikimedia"
          fi

          export PBUILDER_CONFIG="$WORKSPACE/job-pbuilderrc"
          export LINTIAN=true
          /usr/bin/build-and-provide-package
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'

    - shell:
        cmd: |
          set -o pipefail
          jdg-debc | tee debc.txt
        chdir: '{{ ansible_user_dir }}/workspace'
      environment: '{{ zuul | zuul_legacy_vars }}'
